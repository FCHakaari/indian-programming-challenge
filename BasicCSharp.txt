Вопросы к модулю

1) Что такое классы и методы?
Ответ: 
	- Класс - ссылочный тип данных. Шаблон для создания объектов;
	- Методы - именнованный блок кода который выполняет определенные дейтствия. Позволяет использовать повторно блок кода, что делает код более управляемым и читаемым

2) Что такое конструктор класса?
Ответ:
	- Конструктор класса  - это специальный метод, который называется именнем класса. Он вызывается автоматически при создание нового объекта этого класса. Конструктор класса например позволяет инициализировать поля и свойства внутри блока кода данного класа

3) Что такое геттеры и сеттеры? Для чего используются геттеры и сеттеры?
Ответ: 
	- Это специальные методы, которые определяют, как можно получить и изменить значение свойств  
	- get - работы с данными 
	Пример использования get
		1) Console.WriteLine(person.Name) // Tom 
		
	- set - устанавливается значения
	Пример использования set
		1) указатель на объект класса.указатель куда передаем = значение;
		2) person.Name = "Tom';
	
	Пример написания:
		1) public string Name { get; set; }
		2) piblic string Name 
		{
			get { return name; }			
			set { name = value; }
		}
		3) piblic string Age 
		{
			get { return age; }			
			set 
			{ 
				if (value < 1 || value > 120)
				{
					Console.WriteLine("");
				}
				else
				{
					age = value;
				} 
			}
			
			person.Age = 37;
			Console.WriteLine(person.Age);  // 37

			person.Age = -23;               // Возраст должен быть в диапазоне от 1 до 120
			Console.WriteLine(person.Age);  // 37 - возраст не изменился
		}
		
4) Что такое модификаторы доступа? Для чего они используются?
Ответ: 
	- Модификаторы доступа позволяют указать допустимую область видимости для компонентов класса, если не указать модификаторы доступа, то по умолчанию будет private. 
	- Основные 6 модификаторов доступа: 
		- public - публичный, доступ в любом участке кода, а также в других сборках; 
		- private - приватный, доступный только в рамках своего класса или структуры;
		- protected - доступен в любом участке кода или его производных(классы-наследники); 
		- internal - доступен в любом участке кода, однако не доступен в других сборках;
		- protected internal - совмещает функционал protected и internal. Доступен из любово места в текущей сборке и из производных классов, которые могут располагаться в других сборках;
		- private protected - компонент класса доступен из любого места в своем классе или в производных классах, которые определены в той же сборке.
	- 2 дополнительных модификаторов доступа:
		- file - класс или структура с таким модификатором доступен только в этом файле;
		- sealed - кастрация класса. Класс с таким модификатором доступа может наследоваться от другого класса, но от него нельзя наследоваться.

5) Какие методы и поля называются статическими? Зачем нужны статические методы?
Ответ:
	- Статические методы и поля принадлежат не конкретному объекту класса, а самому классу, то есть мы можем обратиться к статическим методам и полям не создавая объект класса. 
	- Это может пригодиться:
		- если будет какой-либо метод, который выполняет одно и тоже действия во всех экземплярах класса,
		- если будет статическое поле, то чаще всего используется для реализации счетчиков, констант, глобальных переменных и т.п.

6) Что такое наследование? Зачем используется наследование? От скольких классов можно наследоваться в C#?
Ответ:
	- Наследование - позволяет одному классу получить свойства и методы другого класса, а также дочерный класс можно изменять, дополнять и т.п.
	Пример:
		1 вариант:
			public class Animal
			{
				public string Name { get; set; }
				
				public void Eat()
				{
					Console.WriteLine($"{Name} ест.");
				}
			}

			public class Dog : Animal 
			{

			}
			
	- Наследование используют из-за огромного кол-во плюсов:
		- Повторное использование кода, что позволяет уменьшить объем работы, а также сгрупировать код
		- Расширенние функционала, если мы добавим поля или методы в родительский класс, то дочерние классы также смогут использовать данные методы или поля
		- Гибкость, создаются иерархии классов, то есть родительский класс может быть заменен дочерним.
		
	- Наследоваться можно только от 1 класса, но если наследоваться от интерфейсов, то ограничений нет
	Пример
		1 вариант одиночное наследование интерфейса
			interface IRunAction
			{
			    void Run();
			}
			class BaseAction : IRunAction
			{
			    public void Run()
			    {
				Console.WriteLine("Run");
			    }
			}
		2 вариант множественное наследование интерфейса
			interface IAction
			{
			    void Move();
			}
			interface IRunAction : IAction
			{
			    void Run();
			}
			class BaseAction : IRunAction
			{
			    public void Move()
			    {
				Console.WriteLine("Move");
			    }
			    public void Run()
			    {
				Console.WriteLine("Run");
			    }
			}

7) Что такое полиморфизм? Привести устный пример наследования и полиморфизма.
Ответ:
	- Полиморфизм позволяет один и тот же запрос обработать по разному, в зависимости от типа объекта, то есть дочерные классы могут провести изменения, которые не касаются функционала
	Пример:
		public class Animal
		{
			public void Sound()
			{
				Console.WriteLine("Звук");
			}
		}
		
		public class Dog : Animal
		{
			public void Sound()
			{
				Console.WriteLine("Гав-Гав");
			}
		}
		
		Animal animal1 = new Dog();  // Полиморфизм
		animal1.Sound();  // Выводит: "Гав-гав!"

8) Что такое интерфейс? Можно ли добавить в интерфейс статичные методы?
Ответ:
	- Интерфейс представляет ссылочный тип, который определяет некоторый функционал без реализации, а уже дочерние классы занимаются реализацией функционала. Обычно перед названием ставят "I", это не обязательно, просто стиль программирования.
	- В интерфейс можно добавить статичные методы

9) Что такое абстрактный класс? Чем абстрактный класс отличается от интерфейса?
Ответ:
	- Абстрактный класс - это некий шаблон на основе которого будут создаваться дочерние классы, но его нельзя использовать напрямую для создания объектов.
	- Интерфейс - может определять реализации по умолчанию для методов или полей, а абстрактный класс предназначем, чтобы быть просто шаблоном для дочерних классов

10) Что такое SOLID? Привести примеры каждого принципа SOLID.
Ответ:
	-Существует 5 основных принципов SOLID
		- SRP - принцип единственной ответственности. Один класс - одна задача
		- OCP - принцип открытости/закрытости. Класс открыт для расширения, закрыт для изменения
		- LSP - принцип подстановки Лисков. Должна быть возможность заменить объект базового класса объектом его подкласса без изменения правильности работы программы. Пример: если родительский класс делает кофе, то дочерний класс должен уметь делать кофе или кофейные напитки.
		- ISP - принцип разделения интерфейсов. Лучше иметь несколько узконаправленных интерфейсов, чем один универсальный.
		- DIP - принцип инверсии зависимостей. Модули верхнего уровня не должны зависить от модулей нижнего уровня. Абстракции не должны зависить от деталей, детали должны зависить от абстракции

11) Что такое инкапсуляция?
Ответ:
	- Инкапсуляция предполагает объединение данных и методов, которые работают с этими данными, а также сокрытие внутренней реализации от внешнего мира 

12) Для чего нужен Enum?
Ответ: 
	- Enum - это набор логически связанных констант. Используется, к примеру, для того, чтобы сделать код более осмысленным, заменить 0, 1, 2... на логичные имена red, blue, green...

13) Как подключать модули в C#? Для чего нужен Nuget?
Ответ:
	- Обычно используется ключевое слово "using". 
	- Nuget - менеджер пакетов в основном используемый для упаковки и распространения ПО написаных на .NET 
	Пример использования:
		- Для начала переходим в директорию проекта;
		- Используем комманду "dotnet add package Newtonsoft.Json", где "Newtonsoft.Json" название пакета;
		- После этого можем зайти в файл конфигурации проекта с расширением csproj, то встретим там элемент "PackageReference", который представляет добавленный пакет;
		- Теперь можем подключать пространство имен из данного пакета.

14) Что такое обобщения типов (Generics)? Для чего их можно использовать?
Ответ:
	- generic - обобщенные типы, способ создания универсальных классов, интерфейсов, методов и делегатов, которые могут работать с различными типами данных

15) Что такое иммутабельные коллекции и зачем они нужны? В чем преимущество использования? Как их создавать?
Ответ:
	- Иммутабельные коллекции в C# — это коллекции, которые не могут быть изменены после их создания. Для этого используется пакет Nuget System.Collections.Immutable

16) Коллекции в C#: List<T>, LinkedList<T>
Ответ:
	- List<T> - это обобщенная коллекция, которая реализует динамический массив в C#. Она предоставляет доступ к элементам по индексу и поддерживает добавление, удаление и изменение элементов. Коллекция автоматически изменяет свой размер по мере добавления новых элементов. Это одна из наиболее часто используемых коллекций в C#.
	Доп инфа - под капотом динамический массив с размером 4 элемента, если мы хотим его расширить, то используется resize, который увеличивает наш list в 1,5-2х раза
	
	Особенности List<T>:
		- Операции вставки и удаления могут быть дорогими, особенно если они происходят в начале или середине списка, так как элементы могут быть перемещены. 
		- Доступ по индексу очень быстрый, с временной сложностью O(1). 
		- Поддерживает методы для сортировки, поиска и модификации элементов.

	- LinkedList<T> — это коллекция, которая представляет собой двусвязный список. В отличие от List<T>, элементы в LinkedList<T> не хранятся в памяти подряд, а каждый элемент содержит ссылку на следующий и предыдущий элементы. Это дает определенные преимущества, когда часто выполняются операции вставки и удаления элементов в середине или в начале коллекции.
	Доп инфа - двухсвязный лист, каждый элемент это LinkedList Node, который содержит: 
		- элемент, 
		- ссылку на след элемент, если элемента нет, то ссылается на none
		- ссылку на предыдущий элемент, если элемента нет, то ссылается на none.
	
	Особенности LinkedList<T>:
		- Вставка и удаление элементов в начале или в середине списка выполняются быстрее (O(1)), чем в List<T>, поскольку не нужно перемещать элементы. 
		- Доступ по индексу более медленный (O(n)), так как необходимо пройти по списку, начиная с головы. 
		- Позволяет легко реализовать такие структуры данных, как очередь или стек.
		
17) Коллекции в C#: Queue<T>, Stack<T>, Dictionary<T, V>
Ответ:
	- Queue<T> — это коллекция, реализующая структуру данных "очередь", которая работает по принципу FIFO (First In, First Out). Это значит, что элементы, добавленные в очередь первыми, будут извлечены первыми.
	
	Особенности Queue<T>:
		- Быстрое добавление элементов в конец очереди и извлечение элементов из начала очереди.
		- Не поддерживает прямой доступ к элементам по индексу.
		- Подходит для задач, требующих последовательной обработки элементов, таких как очереди задач или событий.

	- Stack<T> — это коллекция, реализующая структуру данных "стек", которая работает по принципу LIFO (Last In, First Out). Это значит, что последний добавленный элемент будет извлечен первым.
	
	Особенности Stack<T>:
		- Операции Push (добавление элемента) и Pop (извлечение элемента) выполняются очень быстро.
		- Не поддерживает прямой доступ к элементам по индексу.
		- Используется в задачах, где требуется обработка элементов в обратном порядке, например, для реализации отмены операций.
		
	- Dictionary<T, V> — это коллекция, представляющая собой ассоциативный массив или хэш-таблицу, где элементы хранятся в виде пар "ключ-значение". Ключи уникальны, и с помощью них можно быстро искать значения.
	Доп инфа - это хеш-таблица, key-value,  
	
	Особенности Dictionary<T, V>:
		- Очень быстрый доступ к значениям по ключу (время работы O(1) в среднем).
		- Ключи должны быть уникальными, и они обычно имеют тип, реализующий интерфейс IEquatable<T>.
		- Подходит для хранения данных, где для каждого ключа необходимо сопоставить значение.

18) Коллекции в C#: HashSet<T>
Ответ:
	- HashSet<T> — это коллекция, которая представляет собой множество, где каждый элемент уникален. В отличие от List<T>, элементы в HashSet<T> не имеют порядка, но коллекция гарантирует, что каждый элемент будет встречаться в ней только один раз.
	
	Особенности HashSet<T>:
		- Уникальность элементов.
		- Операции добавления, удаления и проверки наличия элемента выполняются быстро (O(1)).
		- Не поддерживает порядок элементов.
	
19) Что такое строковая интерполяция и как ее можно применять? Как сложить несколько строк вместе?
Ответ:
	- Строковая интерполяция в C# – это упрощенный способ форматирования строк, позволяющий включать значения переменных прямо в строковый литерал. Это делает код более читабельным и компактным. 
( Проще говоря это F-строки)
	- В C# можно соединять строки несколькими способами. Самый простой - использовать оператор + или метод string.Concat(). Для более сложных случаев, когда нужно объединить много строк, полезен класс StringBuilder. 
	Пример:
		- Оператор "+":
			string str1 = "Hello";
			string str2 = " ";
			string str3 = "world";
			string result = str1 + str2 + str3;
	
		- Метод string.Concat():
			string str1 = "Hello";
			string str2 = " ";
			string str3 = "world";
			string result = string.Concat(str1, str2, str3);
			
		- Класс StringBuilder:
			string[] words = { "Hello", " ", "world", "!" };
			StringBuilder sb = new StringBuilder();
			foreach (string word in words)
			{
			    sb.Append(word);
			}
			string result = sb.ToString(); // result будет равен "Hello world!"

20) Как в C# взять подстроку строки? Как обрезать лишние пробелы в начале и в конце строки? Как поменять регистр строки? Как разделить строку по символу? .Trim() .TrimStart() TrimEnd() ToUpper() ToLower() Split()
	- Использовать метод Substring()
	Пример:
	string sourceString = "Hello, world!";
		- string substring = sourceString.Substring(7); // Получит "world!";
		- string substring = sourceString.Substring(0, 5); // Получит "Hello";
		- string substring = sourceString.Substring(7, 5); // Получит "world".
	- Использовать методы .Trim() .TrimStart() TrimEnd()
	- Использовать методы ToUpper() ToLower()
	- Использовать метод Split()
	Пример:
		string text = "И поэтому все так произошло";
		string[] words = text.Split(new char[] { ' ' });
		foreach (string s in words)
		{
		    Console.WriteLine(s);
		}

21) Как в C# работать со значением null? Для чего оно нужно?
Ответ: 
	- null - ключевое слово, которое является литералом и преставляет пустую ссылку

22) Как обрабатывать исключения? Как обработать определенное исключение?
	- Обратывается исключения с помощью блока кода try...catch...finally, где try - выполняется если не возникло исключения, catch - выполняется при возникновению исключения, finally выполняется всегда после try/catch.
	- В блоке catch можно указать определенный тип исключения с определенными условиями
	Пример:
		- определенный тип исключений catch (тип исключений)
		- определенный тип с условием catch (тип исключений) when (условие)

23) Что такое класс Exception? Как создать свое исключение? Как можно использовать throw?
	- Базовым для всех типов исключений является тип Exception. Этот тип определяет ряд свойств, с помощью которых можно получить информацию об исключении.
	Свойства:
		- InnerException: хранит информацию об исключении, которое послужило причиной текущего исключения
		- Message: хранит сообщение об исключении, текст ошибки
		- Source: хранит имя объекта или сборки, которое вызвало исключение
		- StackTrace: возвращает строковое представление стека вызовов, которые привели к возникновению исключения
		- TargetSite: возвращает метод, в котором и было вызвано исключение
		
	Специализированные тип исключений:
		- DivideByZeroException: представляет исключение, которое генерируется при делении на ноль
		- ArgumentOutOfRangeException: генерируется, если значение аргумента находится вне диапазона допустимых значений
		- ArgumentException: генерируется, если в метод для параметра передается некорректное значение
		- IndexOutOfRangeException: генерируется, если индекс элемента массива или коллекции находится вне диапазона допустимых значений
		- InvalidCastException: генерируется при попытке произвести недопустимые преобразования типов
		- NullReferenceException: генерируется при попытке обращения к объекту, который равен null (то есть по сути не определен)
